@page "/memory-game/{GameId}/{CardCollectionId:int}"
@page "/play-memory/{GameId}/{CardCollectionId:int}"

@inject NavigationManager Nav
@inject IJSRuntime Js
@inject IOptions<ApiOptions> Api

@implements IAsyncDisposable

@if (string.IsNullOrWhiteSpace(PlayerName))
{
    <NameModal OnNameSubmit="async name => await OnNameSubmit(name)" />
}

@if (_playersTurn == null)
{
    <p>Invite <input id="invite" class="form-control-plaintext p-2" readonly value="@Nav.Uri" /></p>
    <div class="display-6">Waiting for players....</div>
    <button class="btn btn-primary mb-5" @onclick="async() => await StartGame()">Click to start</button>
}

<div class="row">
    @if (_playersTurn != null)
    {
        @if (_winMessage == null)
        {
            <div class="display-6 text-primary">@(_playersTurn.Name != PlayerName ? $"It is {_playersTurn.Name}'s turn" : "It's your turn")</div>
        }
        else
        {
            <button @onclick="Reset" class="btn btn-primary col-6">Play again</button>
            <div class="display-6 text-success mt-2">@_winMessage</div>
        }

        <div class="col-xl-9">
            <div class="row">
                @foreach (var card in _cards)
                {
                    <img class="col-2 memory-card" @onclick="async () => await Flip(card)"
                         style=@(!card.IsFlipped ? "transform: rotateY(180deg);" : "" )
                         src="@(!card.IsFlipped ? " not-flipped.png" : card.ImageUrl)" />
                }
            </div>
        </div>
    }

    <div class="col-xl-3 mt-xl-0 mt-1">
        <ul class="list-group">
            @foreach (var player in _players)
            {
                <li class="list-group-item bg-secondary text-light">@player.Name - <span class="primary">@player.Points points</span></li>
            }
        </ul>
    </div>
</div>

@code {
    public string PlayerName { get; set; }
    [Parameter] public string GameId { get; set; }
    [Parameter] public int CardCollectionId { get; set; }

    private string _winMessage;
    private ICollection<MemoryCardResponse>
        _cardsFlipped = new List<MemoryCardResponse>
            ();
    private bool _flipping;
    private HubConnection _connection;
    private PlayerResponse _playersTurn;
    private ICollection<PlayerResponse>
        _players = new List<PlayerResponse>
            ();
    private IEnumerable<MemoryCardResponse>
        _cards
    { get; set; } = new List<MemoryCardResponse>
            ();

    public void Reset()
    {
        _cardsFlipped.Clear();
        _playersTurn = null;
        _winMessage = null;
        _flipping = false;
        foreach (var player in _players)
        {
            player.Points = 0;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        _connection = new HubConnectionBuilder().WithUrl(Api.Value.Url + IMemoryGameHub.Uri).Build();

        _connection.On<PlayerResponse>
            (nameof(IMemoryGameClient.PlayerJoined), player =>
            {
                _players.Add(player);
                StateHasChanged();
            });

        _connection.On<string, bool>
            (nameof(IMemoryGameClient.Turn), async (playerName, addPoint) =>
            {
                if (_cardsFlipped.Count != 2) return;
                var player = _players.First(p => p.Name == playerName);

                if (addPoint)
                {
                    player.Points++;
                    if (_cards.All(c => c.IsFlipped))
                    {
                        var maxPoints = _players.Max(p => p.Points);
                        var winners = _players.Where(p => p.Points == maxPoints).ToArray();

                        if (winners.Count() > 1) _winMessage = "It's a tie!";
                        else
                        {
                            var winner = winners.First();
                            _winMessage = winner.Name == PlayerName ? "You won!" : $"{winner.Name} won the game!";
                        }
                    }
                }
                else
                {
                    await Task.Delay(1100);
                    foreach (var c in _cardsFlipped) c.IsFlipped = false;
                    _playersTurn = player;
                }

                _cardsFlipped.Clear();
                StateHasChanged();
            });

        _connection.On<string>
            (nameof(IMemoryGameClient.Flipping), id =>
            {
                var card = _cards.First(c => c.TempId == id);
                card.IsFlipped = true;
                _flipping = false;
                _cardsFlipped.Add(card);
                StateHasChanged();
            });

        _connection.On<IEnumerable<MemoryCardResponse>, PlayerResponse>(nameof(IMemoryGameClient.Start), (cards, player) =>
        {
            if (_playersTurn != null) Reset();

          _playersTurn = player;
          _cards = cards;
         StateHasChanged();
        });

        _connection.On<string>(nameof(IMemoryGameClient.PlayerLeft), playerName =>
        {
            if (_playersTurn.Name == playerName)
            {
                _cardsFlipped.Clear();
            }

            _players.Remove(_players.First(p => p.Name == playerName));
            StateHasChanged();
        });

        await _connection.StartAsync();
        if (!string.IsNullOrWhiteSpace(PlayerName)) await JoinGame();
    }

    private async Task Flip(MemoryCardResponse card)
    {
        Console.WriteLine($"Clicked {card.TempId}");
        if (_flipping || _playersTurn.Name != PlayerName || card.IsFlipped || _cardsFlipped.Any(c => c.TempId == card.TempId))
        {
            return;
        }

        _flipping = true;
        await _connection.SendAsync(nameof(IMemoryGameHub.Flip), GameId, card.TempId);
    }

    public async Task StartGame()
    {
        await _connection.SendAsync(nameof(IMemoryGameHub.Start), GameId);
    }

    public async Task OnNameSubmit(string name)
    {
        PlayerName = name;
        await JoinGame();
        await Js.InvokeVoidAsync("copyToClipboard", "invite");
    }

    private async Task JoinGame()
    {
        _players = await _connection.InvokeAsync<ICollection<PlayerResponse>>(nameof(IMemoryGameHub.Join), GameId, CardCollectionId, PlayerName);
    }

    public async ValueTask DisposeAsync()
    {
        if (_connection is not null) await _connection.DisposeAsync();
    }
}
