@page "/"
@inject IConfiguration Config
@inject HttpClient Client

<PageTitle>Index</PageTitle>

<h5>@_message</h5>
<button @onclick="() => _showAddCardCollection = !_showAddCardCollection" class="btn btn-outline-primary">
    @(_showAddCardCollection ? "Hide" : "Show")
</button>

@if (_showAddCardCollection)
{
    <AddCardCollectionComponent Value="Token" OnAdd="CollectionAdded" />
}

<label class="form-label m-1">
    Password
    <input class="form-control" type="password" @bind="Token" @bind:event="oninput" />
</label>
<div class="row m-2">
    @foreach (var collection in _cardCollections)
    {
        <div class="col-sm-5 mt-3">
            <div class="card bg-dark text-light">
                <div class="row">
                    <div class="col-8">
                        <img class="card-img" src="@collection.FirstCardImageUrl" />
                        <div class="card-body">
                            <h5 class="card-title">@collection.Name</h5>
                            <p class="card-text">Cards: @collection.CardsCount</p>
                        </div>
                    </div>
                    <div class="card-footer col-4">
                        <button class="btn btn-lg btn-danger" @onclick="() => Delete(collection.Id)">X</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .card-img {
        max-width: 300px;
    }
</style>

@code{
    private string Token = string.Empty;
    private string _message = string.Empty;
    private bool _showAddCardCollection = true;
    private List<CardCollectionResponse> _cardCollections = new();

    public async Task CollectionAdded(CardCollectionResponse collection)
    {
        _cardCollections.Add(collection);
        _showAddCardCollection = false;
        await PushMessage($"created {collection.Name}");
    }

    private async Task Delete(int id)
    {
        try
        {
            Client.AddAuthHeaders(Token);

            var response = await Client.DeleteAsync($"cardcollections/{id}");
            var cardCollectionResponse = await response.Content.ReadFromJsonAsync<RemoveCardCollectionResponse>();
        }
        finally
        {
            Client.RemoveAuthHeaders();
        }
    }

    private async Task PushMessage(string message)
    {
        _message = message;
        await Task.Delay(5000);
        if (_message == message) _message = "";
    }
}